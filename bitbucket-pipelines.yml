image: python:3.11.1

# enable Docker for your repository
options:
  docker: true

definitions:
  services:
    postgres:
      image: postgres
      variables:
        POSTGRES_DB: 'pipelines'
        POSTGRES_USER: 'test_user'
        POSTGRES_PASSWORD: 'test_user_password'

  steps:
    - step: &django-tests
        name: Run Django Tests
        caches:
          - pip
        script:
          - cd $BITBUCKET_CLONE_DIR/polar_labs
          # match poetry version with the one you're using for your project
          - pip install --no-cache-dir poetry==1.8.2
          - poetry config virtualenvs.in-project true
          - poetry install --no-root --compile
          - poetry run python manage.py ensure_migrations
          - poetry run python manage.py ensure_tests_run
          - poetry run python manage.py test
        services:
          - postgres

pipelines:
  branches:
    master:
      - step: *django-tests

      - stage:
          name: Deploy to Production
          deployment: production
          trigger: manual
          steps:
            - step:
                name: Upload image to Digital Ocean
                script:
                  - export BITBUCKET_COMMIT_SHORT=$(echo $BITBUCKET_COMMIT | cut -c1-7)
                  - export IMAGE_NAME=$IMAGE_TAG_NAME:$BITBUCKET_COMMIT_SHORT
                  - docker build -t $IMAGE_NAME .
                  - docker login $CONTAINER_REGISTRY_HOST -u $CONTAINER_REGISTRY_USERNAME -p $CONTAINER_REGISTRY_PASSWORD
                  - docker push $IMAGE_NAME
                services:
                  - docker

  pull-requests:
    '**': # this runs as default for any branch not elsewhere defined
      - step: *django-tests
